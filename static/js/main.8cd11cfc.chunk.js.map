{"version":3,"sources":["components/ClientInfo.js","App.js","reportWebVitals.js","index.js"],"names":["ClientInfo","props","user","toggleUser","name","email","expanded","address","street","suite","city","onClick","href","toLowerCase","App","useState","users","setUsers","setShowAll","getData","a","fetch","req","json","data","userInfo","map","updated","expandAll","newState","className","disabled","length","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAAe,SAASA,EAAWC,GAAO,IAEjCC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,WAENC,EAA0BF,EAA1BE,KAAMC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SAJoB,EAMTJ,EAAKK,QAA7BC,EANiC,EAMjCA,OAAQC,EANyB,EAMzBA,MAAOC,EANkB,EAMlBA,KAEvB,OACC,qCACC,oBAAIC,QAAS,kBAAMR,EAAWC,IAA9B,SAAsCA,IACrCE,GACA,qCACC,sCAAOE,EAAP,YAAiBC,EAAjB,aAA2BC,KAC3B,4BAAG,mBAAGE,KAAI,iBAAYP,GAAnB,SAA6BA,EAAMQ,wBCK5B,SAASC,IAAM,MAGFC,mBAAS,CAAC,KAHR,mBAGrBC,EAHqB,KAGdC,EAHc,OAIEF,oBAAS,GAJX,mBAIZG,GAJY,oBAObC,IAPa,2EAO5B,gCAAAC,EAAA,sEACoBC,MAAM,8CAD1B,cACQC,EADR,gBAEqBA,EAAIC,OAFzB,OAEQC,EAFR,OAGQC,EAAWD,EAAKE,KAAI,SAAAxB,GAAI,kCAAUA,GAAV,IAAgBI,UAAU,OACxDW,EAASQ,GAJX,4CAP4B,sBAe5B,SAAStB,EAAWC,GAClB,IAAMuB,EAAUX,EAAMU,KAAI,SAAyBxB,GACjD,OAAIA,EAAKE,OAASA,EACT,2BAAKF,GAAZ,IAAkBI,UAAWJ,EAAKI,WAE7BJ,KAETe,EAASU,GAIX,SAASC,EAAUC,GACjBX,EAAWW,GACXZ,GAAS,SAAAD,GAIP,OAHoBA,EAAMU,KAAI,SAAAxB,GAAI,kCAC3BA,GAD2B,IACrBI,SAAUuB,UAO3B,OACE,sBAAKC,UAAU,MAAf,UAEE,wBACEnB,QAAO,sBAAE,sBAAAS,EAAA,sEAAkBD,IAAlB,mFACTY,SAAUf,EAAMgB,OAAS,EAF3B,2BAKChB,EAAMgB,OAAS,GACd,qCACE,wBAAQrB,QAAS,kBAAMiB,GAAU,IAAjC,0BACA,wBAAQjB,QAAS,kBAAMiB,GAAU,IAAjC,4BACA,qBAAKE,UAAU,YAAf,SAKId,EAAMU,KAAI,SAACxB,EAAM+B,GACf,OAAO,cAACjC,EAAD,CAAwBE,KAAMA,EAAMC,WAAYA,GAA/B8B,cC1ExC,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8cd11cfc.chunk.js","sourcesContent":["export default function ClientInfo(props) {\n\t// Get user info and function for toggling individual user\n\tconst { user, toggleUser } = props\n\t// Extract user info\n\tconst { name, email, expanded } = user\n\t// Extract individual address parts\n\tconst { street, suite, city } = user.address\n\n\treturn (\n\t\t<>\n\t\t\t<h1 onClick={() => toggleUser(name)}>{name}</h1>\n\t\t\t{expanded &&\n\t\t\t\t<>\n\t\t\t\t\t<p>{`${street} ${suite}, ${city}`}</p>\n\t\t\t\t\t<p><a href={`mailto:${email}`}>{email.toLowerCase()}</a></p>\n\t\t\t\t</>\n\t\t\t}\n\t\t</>\n\t)\n}","/**\n * Table of contents:\n * \n * 1. JavaScript\n *  1.1. Global state (list of users, toggle for all users' expanded view)\n *  1.2. Get data from jsonplaceholder.com\n *  1.3. Toggle expanded view for individual users\n *  1.4. Toggle expanded view for all users\n * \n * 2. JSX\n *  2.1. Button: Fetch data\n *  2.2. Checkbox: Toggle all users' expanded view\n *  2.3. Display all users\n */\n\nimport './App.css'\nimport { useState } from \"react\"\nimport ClientInfo from \"./components/ClientInfo\"\n\nexport default function App() {\n  // 1. JavaScript\n  // 1.1. Global state (list of users, toggle for all users' expanded view)\n  const [users, setUsers] = useState([{}])\n  const [showAll, setShowAll] = useState(true)\n\n  // 1.2. Get data from jsonplaceholder.com\n  async function getData() {\n    const req = await fetch(\"https://jsonplaceholder.typicode.com/users\")\n    const data = await req.json()\n    const userInfo = data.map(user => ({ ...user, expanded: true }))\n    setUsers(userInfo)\n  }\n\n  // 1.3. Toggle expanded view for individual users\n  function toggleUser(name) {\n    const updated = users.map(function updateUserArray(user) {\n      if (user.name === name) {\n        return { ...user, expanded: !user.expanded }\n      }\n      return user\n    })\n    setUsers(updated)\n  }\n\n  // 1.4. Toggle expanded view for all users\n  function expandAll(newState) {\n    setShowAll(newState)\n    setUsers(users => {\n      const updatedUser = users.map(user => (\n        { ...user, expanded: newState }\n      ))\n      return updatedUser\n    })\n  }\n\n  // 2. JSX\n  return (\n    <div className=\"App\">\n      {/* 2.1. Button: Fetch data */}\n      <button\n        onClick={async () => await getData()}\n        disabled={users.length > 1}\n      >Last inn data</button>\n\n      {users.length > 1 &&\n        <>\n          <button onClick={() => expandAll(true)}>Vis all info</button>\n          <button onClick={() => expandAll(false)}>Skjul all info</button>\n          <div className=\"user-info\">\n            {/* 2.2. Toggle all users */}\n\n            {/* 2.3. Display all users */}\n            {\n              users.map((user, index) => {\n                return <ClientInfo key={index} user={user} toggleUser={toggleUser} />\n              })\n            }\n          </div>\n        </>\n      }\n    </div>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}